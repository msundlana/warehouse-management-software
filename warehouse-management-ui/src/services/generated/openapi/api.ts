/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ArticleDTO
 */
export interface ArticleDTO {
    /**
     * 
     * @type {number}
     * @memberof ArticleDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ArticleDTO
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ArticleDTO
     */
    'stock'?: number;
}
/**
 * 
 * @export
 * @interface ExceptionResponse
 */
export interface ExceptionResponse {
    /**
     * 
     * @type {string}
     * @memberof ExceptionResponse
     */
    'timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExceptionResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExceptionResponse
     */
    'details'?: string;
}
/**
 * 
 * @export
 * @interface JWTRequest
 */
export interface JWTRequest {
    /**
     * 
     * @type {string}
     * @memberof JWTRequest
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof JWTRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface JWTResponse
 */
export interface JWTResponse {
    /**
     * 
     * @type {string}
     * @memberof JWTResponse
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof JWTResponse
     */
    'jwtToken'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof JWTResponse
     */
    'roles'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PageArticleDTO
 */
export interface PageArticleDTO {
    /**
     * 
     * @type {number}
     * @memberof PageArticleDTO
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageArticleDTO
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageArticleDTO
     */
    'size'?: number;
    /**
     * 
     * @type {Array<ArticleDTO>}
     * @memberof PageArticleDTO
     */
    'content'?: Array<ArticleDTO>;
    /**
     * 
     * @type {number}
     * @memberof PageArticleDTO
     */
    'number'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageArticleDTO
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageArticleDTO
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageArticleDTO
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageArticleDTO
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageArticleDTO
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageArticleDTO
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PageProductDTO
 */
export interface PageProductDTO {
    /**
     * 
     * @type {number}
     * @memberof PageProductDTO
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageProductDTO
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageProductDTO
     */
    'size'?: number;
    /**
     * 
     * @type {Array<ProductDTO>}
     * @memberof PageProductDTO
     */
    'content'?: Array<ProductDTO>;
    /**
     * 
     * @type {number}
     * @memberof PageProductDTO
     */
    'number'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageProductDTO
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageProductDTO
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageProductDTO
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageProductDTO
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageProductDTO
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageProductDTO
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PageProductInventoryDTO
 */
export interface PageProductInventoryDTO {
    /**
     * 
     * @type {number}
     * @memberof PageProductInventoryDTO
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageProductInventoryDTO
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageProductInventoryDTO
     */
    'size'?: number;
    /**
     * 
     * @type {Array<ProductInventoryDTO>}
     * @memberof PageProductInventoryDTO
     */
    'content'?: Array<ProductInventoryDTO>;
    /**
     * 
     * @type {number}
     * @memberof PageProductInventoryDTO
     */
    'number'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageProductInventoryDTO
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageProductInventoryDTO
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageProductInventoryDTO
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageProductInventoryDTO
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageProductInventoryDTO
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageProductInventoryDTO
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PageableObject
 */
export interface PageableObject {
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'offset'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageableObject
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageSize'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'unpaged'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'paged'?: boolean;
}
/**
 * 
 * @export
 * @interface ProductArticleDTO
 */
export interface ProductArticleDTO {
    /**
     * 
     * @type {number}
     * @memberof ProductArticleDTO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductArticleDTO
     */
    'productId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductArticleDTO
     */
    'articleId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductArticleDTO
     */
    'quantity'?: number;
    /**
     * 
     * @type {ArticleDTO}
     * @memberof ProductArticleDTO
     */
    'article'?: ArticleDTO;
}
/**
 * 
 * @export
 * @interface ProductDTO
 */
export interface ProductDTO {
    /**
     * 
     * @type {number}
     * @memberof ProductDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductDTO
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductDTO
     */
    'price'?: number;
    /**
     * 
     * @type {Set<ProductArticleDTO>}
     * @memberof ProductDTO
     */
    'articles'?: Set<ProductArticleDTO>;
}
/**
 * 
 * @export
 * @interface ProductInventoryDTO
 */
export interface ProductInventoryDTO {
    /**
     * 
     * @type {number}
     * @memberof ProductInventoryDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductInventoryDTO
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductInventoryDTO
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductInventoryDTO
     */
    'availableStock'?: number;
}
/**
 * 
 * @export
 * @interface SortObject
 */
export interface SortObject {
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'empty'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'sorted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'unsorted'?: boolean;
}

/**
 * ArticleControllerApi - axios parameter creator
 * @export
 */
export const ArticleControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ArticleDTO} articleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addArticle: async (articleDTO: ArticleDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleDTO' is not null or undefined
            assertParamExists('addArticle', 'articleDTO', articleDTO)
            const localVarPath = `/api/articles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(articleDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArticle: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteArticle', 'id', id)
            const localVarPath = `/api/articles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllArticles: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/articles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticleById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getArticleById', 'id', id)
            const localVarPath = `/api/articles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ArticleDTO} articleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArticle: async (id: number, articleDTO: ArticleDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateArticle', 'id', id)
            // verify required parameter 'articleDTO' is not null or undefined
            assertParamExists('updateArticle', 'articleDTO', articleDTO)
            const localVarPath = `/api/articles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(articleDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArticleControllerApi - functional programming interface
 * @export
 */
export const ArticleControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArticleControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ArticleDTO} articleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addArticle(articleDTO: ArticleDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addArticle(articleDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArticleControllerApi.addArticle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteArticle(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteArticle(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArticleControllerApi.deleteArticle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllArticles(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageArticleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllArticles(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArticleControllerApi.getAllArticles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArticleById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getArticleById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArticleControllerApi.getArticleById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ArticleDTO} articleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateArticle(id: number, articleDTO: ArticleDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateArticle(id, articleDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArticleControllerApi.updateArticle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ArticleControllerApi - factory interface
 * @export
 */
export const ArticleControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArticleControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ArticleControllerApiAddArticleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addArticle(requestParameters: ArticleControllerApiAddArticleRequest, options?: RawAxiosRequestConfig): AxiosPromise<ArticleDTO> {
            return localVarFp.addArticle(requestParameters.articleDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ArticleControllerApiDeleteArticleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArticle(requestParameters: ArticleControllerApiDeleteArticleRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteArticle(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ArticleControllerApiGetAllArticlesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllArticles(requestParameters: ArticleControllerApiGetAllArticlesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageArticleDTO> {
            return localVarFp.getAllArticles(requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ArticleControllerApiGetArticleByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticleById(requestParameters: ArticleControllerApiGetArticleByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ArticleDTO> {
            return localVarFp.getArticleById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ArticleControllerApiUpdateArticleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArticle(requestParameters: ArticleControllerApiUpdateArticleRequest, options?: RawAxiosRequestConfig): AxiosPromise<ArticleDTO> {
            return localVarFp.updateArticle(requestParameters.id, requestParameters.articleDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addArticle operation in ArticleControllerApi.
 * @export
 * @interface ArticleControllerApiAddArticleRequest
 */
export interface ArticleControllerApiAddArticleRequest {
    /**
     * 
     * @type {ArticleDTO}
     * @memberof ArticleControllerApiAddArticle
     */
    readonly articleDTO: ArticleDTO
}

/**
 * Request parameters for deleteArticle operation in ArticleControllerApi.
 * @export
 * @interface ArticleControllerApiDeleteArticleRequest
 */
export interface ArticleControllerApiDeleteArticleRequest {
    /**
     * 
     * @type {number}
     * @memberof ArticleControllerApiDeleteArticle
     */
    readonly id: number
}

/**
 * Request parameters for getAllArticles operation in ArticleControllerApi.
 * @export
 * @interface ArticleControllerApiGetAllArticlesRequest
 */
export interface ArticleControllerApiGetAllArticlesRequest {
    /**
     * 
     * @type {number}
     * @memberof ArticleControllerApiGetAllArticles
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ArticleControllerApiGetAllArticles
     */
    readonly size?: number
}

/**
 * Request parameters for getArticleById operation in ArticleControllerApi.
 * @export
 * @interface ArticleControllerApiGetArticleByIdRequest
 */
export interface ArticleControllerApiGetArticleByIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ArticleControllerApiGetArticleById
     */
    readonly id: number
}

/**
 * Request parameters for updateArticle operation in ArticleControllerApi.
 * @export
 * @interface ArticleControllerApiUpdateArticleRequest
 */
export interface ArticleControllerApiUpdateArticleRequest {
    /**
     * 
     * @type {number}
     * @memberof ArticleControllerApiUpdateArticle
     */
    readonly id: number

    /**
     * 
     * @type {ArticleDTO}
     * @memberof ArticleControllerApiUpdateArticle
     */
    readonly articleDTO: ArticleDTO
}

/**
 * ArticleControllerApi - object-oriented interface
 * @export
 * @class ArticleControllerApi
 * @extends {BaseAPI}
 */
export class ArticleControllerApi extends BaseAPI {
    /**
     * 
     * @param {ArticleControllerApiAddArticleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleControllerApi
     */
    public addArticle(requestParameters: ArticleControllerApiAddArticleRequest, options?: RawAxiosRequestConfig) {
        return ArticleControllerApiFp(this.configuration).addArticle(requestParameters.articleDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ArticleControllerApiDeleteArticleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleControllerApi
     */
    public deleteArticle(requestParameters: ArticleControllerApiDeleteArticleRequest, options?: RawAxiosRequestConfig) {
        return ArticleControllerApiFp(this.configuration).deleteArticle(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ArticleControllerApiGetAllArticlesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleControllerApi
     */
    public getAllArticles(requestParameters: ArticleControllerApiGetAllArticlesRequest = {}, options?: RawAxiosRequestConfig) {
        return ArticleControllerApiFp(this.configuration).getAllArticles(requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ArticleControllerApiGetArticleByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleControllerApi
     */
    public getArticleById(requestParameters: ArticleControllerApiGetArticleByIdRequest, options?: RawAxiosRequestConfig) {
        return ArticleControllerApiFp(this.configuration).getArticleById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ArticleControllerApiUpdateArticleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleControllerApi
     */
    public updateArticle(requestParameters: ArticleControllerApiUpdateArticleRequest, options?: RawAxiosRequestConfig) {
        return ArticleControllerApiFp(this.configuration).updateArticle(requestParameters.id, requestParameters.articleDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {JWTRequest} jWTRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (jWTRequest: JWTRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jWTRequest' is not null or undefined
            assertParamExists('login', 'jWTRequest', jWTRequest)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jWTRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {JWTRequest} jWTRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(jWTRequest: JWTRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JWTResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(jWTRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthControllerApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthControllerApiLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(requestParameters: AuthControllerApiLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<JWTResponse> {
            return localVarFp.login(requestParameters.jWTRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for login operation in AuthControllerApi.
 * @export
 * @interface AuthControllerApiLoginRequest
 */
export interface AuthControllerApiLoginRequest {
    /**
     * 
     * @type {JWTRequest}
     * @memberof AuthControllerApiLogin
     */
    readonly jWTRequest: JWTRequest
}

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     * 
     * @param {AuthControllerApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public login(requestParameters: AuthControllerApiLoginRequest, options?: RawAxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).login(requestParameters.jWTRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductControllerApi - axios parameter creator
 * @export
 */
export const ProductControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ProductDTO} productDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProduct: async (productDTO: ProductDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productDTO' is not null or undefined
            assertParamExists('addProduct', 'productDTO', productDTO)
            const localVarPath = `/api/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProduct', 'id', id)
            const localVarPath = `/api/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProducts: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductById', 'id', id)
            const localVarPath = `/api/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductDTO} productDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: async (id: number, productDTO: ProductDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateProduct', 'id', id)
            // verify required parameter 'productDTO' is not null or undefined
            assertParamExists('updateProduct', 'productDTO', productDTO)
            const localVarPath = `/api/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductControllerApi - functional programming interface
 * @export
 */
export const ProductControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ProductDTO} productDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addProduct(productDTO: ProductDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProduct(productDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductControllerApi.addProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProduct(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProduct(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductControllerApi.deleteProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProducts(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageProductDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProducts(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductControllerApi.getAllProducts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductControllerApi.getProductById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductDTO} productDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProduct(id: number, productDTO: ProductDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProduct(id, productDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductControllerApi.updateProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductControllerApi - factory interface
 * @export
 */
export const ProductControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ProductControllerApiAddProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProduct(requestParameters: ProductControllerApiAddProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductDTO> {
            return localVarFp.addProduct(requestParameters.productDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductControllerApiDeleteProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(requestParameters: ProductControllerApiDeleteProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteProduct(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductControllerApiGetAllProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProducts(requestParameters: ProductControllerApiGetAllProductsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageProductDTO> {
            return localVarFp.getAllProducts(requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductControllerApiGetProductByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById(requestParameters: ProductControllerApiGetProductByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductDTO> {
            return localVarFp.getProductById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductControllerApiUpdateProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct(requestParameters: ProductControllerApiUpdateProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductDTO> {
            return localVarFp.updateProduct(requestParameters.id, requestParameters.productDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addProduct operation in ProductControllerApi.
 * @export
 * @interface ProductControllerApiAddProductRequest
 */
export interface ProductControllerApiAddProductRequest {
    /**
     * 
     * @type {ProductDTO}
     * @memberof ProductControllerApiAddProduct
     */
    readonly productDTO: ProductDTO
}

/**
 * Request parameters for deleteProduct operation in ProductControllerApi.
 * @export
 * @interface ProductControllerApiDeleteProductRequest
 */
export interface ProductControllerApiDeleteProductRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductControllerApiDeleteProduct
     */
    readonly id: number
}

/**
 * Request parameters for getAllProducts operation in ProductControllerApi.
 * @export
 * @interface ProductControllerApiGetAllProductsRequest
 */
export interface ProductControllerApiGetAllProductsRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductControllerApiGetAllProducts
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ProductControllerApiGetAllProducts
     */
    readonly size?: number
}

/**
 * Request parameters for getProductById operation in ProductControllerApi.
 * @export
 * @interface ProductControllerApiGetProductByIdRequest
 */
export interface ProductControllerApiGetProductByIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductControllerApiGetProductById
     */
    readonly id: number
}

/**
 * Request parameters for updateProduct operation in ProductControllerApi.
 * @export
 * @interface ProductControllerApiUpdateProductRequest
 */
export interface ProductControllerApiUpdateProductRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductControllerApiUpdateProduct
     */
    readonly id: number

    /**
     * 
     * @type {ProductDTO}
     * @memberof ProductControllerApiUpdateProduct
     */
    readonly productDTO: ProductDTO
}

/**
 * ProductControllerApi - object-oriented interface
 * @export
 * @class ProductControllerApi
 * @extends {BaseAPI}
 */
export class ProductControllerApi extends BaseAPI {
    /**
     * 
     * @param {ProductControllerApiAddProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    public addProduct(requestParameters: ProductControllerApiAddProductRequest, options?: RawAxiosRequestConfig) {
        return ProductControllerApiFp(this.configuration).addProduct(requestParameters.productDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductControllerApiDeleteProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    public deleteProduct(requestParameters: ProductControllerApiDeleteProductRequest, options?: RawAxiosRequestConfig) {
        return ProductControllerApiFp(this.configuration).deleteProduct(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductControllerApiGetAllProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    public getAllProducts(requestParameters: ProductControllerApiGetAllProductsRequest = {}, options?: RawAxiosRequestConfig) {
        return ProductControllerApiFp(this.configuration).getAllProducts(requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductControllerApiGetProductByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    public getProductById(requestParameters: ProductControllerApiGetProductByIdRequest, options?: RawAxiosRequestConfig) {
        return ProductControllerApiFp(this.configuration).getProductById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductControllerApiUpdateProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    public updateProduct(requestParameters: ProductControllerApiUpdateProductRequest, options?: RawAxiosRequestConfig) {
        return ProductControllerApiFp(this.configuration).updateProduct(requestParameters.id, requestParameters.productDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WarehouseControllerApi - axios parameter creator
 * @export
 */
export const WarehouseControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [searchText] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAvailableProducts: async (searchText?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/warehouse/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchText !== undefined) {
                localVarQueryParameter['searchText'] = searchText;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<ArticleDTO>} articleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadArticles: async (articleDTO: Array<ArticleDTO>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleDTO' is not null or undefined
            assertParamExists('loadArticles', 'articleDTO', articleDTO)
            const localVarPath = `/api/warehouse/articles/load`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(articleDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<ProductDTO>} productDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadProducts: async (productDTO: Array<ProductDTO>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productDTO' is not null or undefined
            assertParamExists('loadProducts', 'productDTO', productDTO)
            const localVarPath = `/api/warehouse/products/load`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellProduct: async (productId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('sellProduct', 'productId', productId)
            const localVarPath = `/api/warehouse/products/{productId}/sell`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WarehouseControllerApi - functional programming interface
 * @export
 */
export const WarehouseControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WarehouseControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [searchText] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAvailableProducts(searchText?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageProductInventoryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAvailableProducts(searchText, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WarehouseControllerApi.getAllAvailableProducts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<ArticleDTO>} articleDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadArticles(articleDTO: Array<ArticleDTO>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loadArticles(articleDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WarehouseControllerApi.loadArticles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<ProductDTO>} productDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadProducts(productDTO: Array<ProductDTO>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loadProducts(productDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WarehouseControllerApi.loadProducts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sellProduct(productId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sellProduct(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WarehouseControllerApi.sellProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WarehouseControllerApi - factory interface
 * @export
 */
export const WarehouseControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WarehouseControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {WarehouseControllerApiGetAllAvailableProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAvailableProducts(requestParameters: WarehouseControllerApiGetAllAvailableProductsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageProductInventoryDTO> {
            return localVarFp.getAllAvailableProducts(requestParameters.searchText, requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WarehouseControllerApiLoadArticlesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadArticles(requestParameters: WarehouseControllerApiLoadArticlesRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.loadArticles(requestParameters.articleDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WarehouseControllerApiLoadProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadProducts(requestParameters: WarehouseControllerApiLoadProductsRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.loadProducts(requestParameters.productDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WarehouseControllerApiSellProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellProduct(requestParameters: WarehouseControllerApiSellProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.sellProduct(requestParameters.productId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllAvailableProducts operation in WarehouseControllerApi.
 * @export
 * @interface WarehouseControllerApiGetAllAvailableProductsRequest
 */
export interface WarehouseControllerApiGetAllAvailableProductsRequest {
    /**
     * 
     * @type {string}
     * @memberof WarehouseControllerApiGetAllAvailableProducts
     */
    readonly searchText?: string

    /**
     * 
     * @type {number}
     * @memberof WarehouseControllerApiGetAllAvailableProducts
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof WarehouseControllerApiGetAllAvailableProducts
     */
    readonly pageSize?: number
}

/**
 * Request parameters for loadArticles operation in WarehouseControllerApi.
 * @export
 * @interface WarehouseControllerApiLoadArticlesRequest
 */
export interface WarehouseControllerApiLoadArticlesRequest {
    /**
     * 
     * @type {Array<ArticleDTO>}
     * @memberof WarehouseControllerApiLoadArticles
     */
    readonly articleDTO: Array<ArticleDTO>
}

/**
 * Request parameters for loadProducts operation in WarehouseControllerApi.
 * @export
 * @interface WarehouseControllerApiLoadProductsRequest
 */
export interface WarehouseControllerApiLoadProductsRequest {
    /**
     * 
     * @type {Array<ProductDTO>}
     * @memberof WarehouseControllerApiLoadProducts
     */
    readonly productDTO: Array<ProductDTO>
}

/**
 * Request parameters for sellProduct operation in WarehouseControllerApi.
 * @export
 * @interface WarehouseControllerApiSellProductRequest
 */
export interface WarehouseControllerApiSellProductRequest {
    /**
     * 
     * @type {number}
     * @memberof WarehouseControllerApiSellProduct
     */
    readonly productId: number
}

/**
 * WarehouseControllerApi - object-oriented interface
 * @export
 * @class WarehouseControllerApi
 * @extends {BaseAPI}
 */
export class WarehouseControllerApi extends BaseAPI {
    /**
     * 
     * @param {WarehouseControllerApiGetAllAvailableProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseControllerApi
     */
    public getAllAvailableProducts(requestParameters: WarehouseControllerApiGetAllAvailableProductsRequest = {}, options?: RawAxiosRequestConfig) {
        return WarehouseControllerApiFp(this.configuration).getAllAvailableProducts(requestParameters.searchText, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WarehouseControllerApiLoadArticlesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseControllerApi
     */
    public loadArticles(requestParameters: WarehouseControllerApiLoadArticlesRequest, options?: RawAxiosRequestConfig) {
        return WarehouseControllerApiFp(this.configuration).loadArticles(requestParameters.articleDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WarehouseControllerApiLoadProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseControllerApi
     */
    public loadProducts(requestParameters: WarehouseControllerApiLoadProductsRequest, options?: RawAxiosRequestConfig) {
        return WarehouseControllerApiFp(this.configuration).loadProducts(requestParameters.productDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WarehouseControllerApiSellProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WarehouseControllerApi
     */
    public sellProduct(requestParameters: WarehouseControllerApiSellProductRequest, options?: RawAxiosRequestConfig) {
        return WarehouseControllerApiFp(this.configuration).sellProduct(requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
    }
}



